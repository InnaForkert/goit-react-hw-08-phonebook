{"version":3,"file":"static/js/299.8ea984d5.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/UserMenu/UserMenu.module.css?1b0e","components/UserMenu/UserMenu.jsx","webpack://goit-react-hw-08-phonebook/./src/components/AppBar/AppBar.module.css?5623","components/AppBar/AppBar.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Contact/Contact.module.css?03fd","components/Contact/Contact.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Title/Title.module.css?a947","components/Title/Title.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/MainPage/MainPage.module.css?04b3","pages/MainPage/MainPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"submit\":\"UserMenu_submit__nIp5s\",\"text\":\"UserMenu_text__IRc+v\",\"userMenu\":\"UserMenu_userMenu__D567p\"};","import { useDispatch, useSelector } from 'react-redux';\r\nimport css from './UserMenu.module.css';\r\nimport { selectToken, selectUser } from 'redux/user/userSlice';\r\nimport { logoutUser } from 'redux/utils/createUser';\r\n\r\nfunction UserMenu() {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n  const token = useSelector(selectToken);\r\n\r\n  function handleLogout() {\r\n    dispatch(logoutUser(token));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={css.userMenu}>\r\n        <p className={css.text}>Welcome, {user.name}!</p>\r\n        <button className={css.submit} onClick={handleLogout}>\r\n          Logout\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UserMenu;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"AppBar_header__znukC\",\"buttons\":\"AppBar_buttons__fJOPX\",\"button\":\"AppBar_button__kpM7h\"};","import UserMenu from 'components/UserMenu/UserMenu';\r\nimport css from './AppBar.module.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectIsLoggedIn } from 'redux/user/userSlice';\r\n\r\nfunction AppBar() {\r\n  const isLoggedIn = useSelector(selectIsLoggedIn);\r\n\r\n  return (\r\n    <div className={css.header}>\r\n      <h1 className={css.logo}>Contact Book</h1>\r\n      <div className={css.buttons}>\r\n        {isLoggedIn ? (\r\n          <UserMenu />\r\n        ) : (\r\n          <>\r\n            <Link className={css.button} to={'/signup'}>\r\n              Sign Up\r\n            </Link>\r\n            <Link className={css.button} to={'/login'}>\r\n              Log In\r\n            </Link>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppBar;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"ContactForm_input__nEWE6\",\"label\":\"ContactForm_label__evHfe\",\"inputContainer\":\"ContactForm_inputContainer__eR164\",\"error\":\"ContactForm_error__b7acX\",\"submit\":\"ContactForm_submit__2AH+U\"};","import { Field, Form, Formik, ErrorMessage } from 'formik';\r\nimport * as yup from 'yup';\r\nimport { nanoid } from 'nanoid';\r\nimport css from './ContactForm.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectContacts } from 'redux/contacts/contactsSlice';\r\nimport { addContact } from 'redux/utils/getContacts';\r\n\r\nconst ContactForm = () => {\r\n  const contacts = useSelector(selectContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const Error = ({ name }) => {\r\n    return (\r\n      <ErrorMessage\r\n        name={name}\r\n        render={message => <p className={css.error}>{message}</p>}\r\n      />\r\n    );\r\n  };\r\n\r\n  const schema = yup.object().shape({\r\n    name: yup\r\n      .string()\r\n      .required()\r\n      .matches(\r\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\r\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n      ),\r\n    number: yup\r\n      .string()\r\n      .required()\r\n      .matches(\r\n        /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\r\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\r\n      ),\r\n  });\r\n\r\n  const initialValues = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  function handleSubmit(values, options) {\r\n    const isInList = contacts.find(contact => contact.name === values.name);\r\n    if (isInList) {\r\n      alert(`${values.name} is already in the list of contacts!`);\r\n    } else {\r\n      dispatch(\r\n        addContact({\r\n          name: values.name,\r\n          id: nanoid(),\r\n          number: values.number,\r\n        })\r\n      );\r\n    }\r\n    options.resetForm();\r\n  }\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={schema}\r\n      onSubmit={handleSubmit}\r\n    >\r\n      <Form>\r\n        <div className={css.inputContainer}>\r\n          <Field\r\n            type=\"text\"\r\n            name=\"name\"\r\n            key={nanoid()}\r\n            className={css.input}\r\n            id=\"name\"\r\n            placeholder=\" \"\r\n          />\r\n          <label className={css.label} htmlFor=\"name\">\r\n            Name\r\n          </label>\r\n          <Error name=\"name\" />\r\n        </div>\r\n        <div className={css.inputContainer}>\r\n          <Field\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            key={nanoid()}\r\n            className={css.input}\r\n            id=\"number\"\r\n            placeholder=\" \"\r\n          />\r\n          <label className={css.label} htmlFor=\"number\">\r\n            Number\r\n          </label>\r\n          <Error name=\"number\" />\r\n        </div>\r\n        <button type=\"submit\" className={css.submit}>\r\n          Add contact\r\n        </button>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"listItem\":\"Contact_listItem__h1wc-\"};","import { nanoid } from 'nanoid';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteContact } from 'redux/utils/getContacts';\r\nimport css from './Contact.module.css';\r\n\r\nconst Contact = ({ contact }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <li key={nanoid()} className={css.listItem}>\r\n      <p>{contact.name}:</p>\r\n      <p>{contact.number}</p>\r\n      <button type=\"button\" onClick={() => dispatch(deleteContact(contact))}>\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\nexport default Contact;\r\n\r\nContact.propTypes = {\r\n  contact: PropTypes.object,\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__r6NxB\"};","import Contact from '../Contact';\r\nimport { nanoid } from 'nanoid';\r\nimport css from './ContactList.module.css';\r\nimport {\r\n  selectContacts,\r\n  selectError,\r\n  selectIsLoading,\r\n} from 'redux/contacts/contactsSlice';\r\nimport { selectFilter } from 'redux/filter/filterSlice';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport { fetchContacts } from 'redux/utils/getContacts';\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector(selectContacts);\r\n  const loading = useSelector(selectIsLoading);\r\n  const error = useSelector(selectError);\r\n  const filter = useSelector(selectFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  const filtered = contacts.filter(el =>\r\n    el.name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <ul className={css.list}>\r\n        {filtered.map(contact => (\r\n          <Contact contact={contact} key={nanoid()} />\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\nexport default ContactList;\r\n","import { nanoid } from 'nanoid';\r\nimport css from '../ContactForm/ContactForm.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectFilter, setFilter } from 'redux/filter/filterSlice';\r\n\r\nconst Filter = () => {\r\n  const dispatch = useDispatch();\r\n  const filter = useSelector(selectFilter);\r\n\r\n  return (\r\n    <div className={css.inputContainer}>\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        id={nanoid()}\r\n        value={filter}\r\n        onChange={e => dispatch(setFilter(e.target.value))}\r\n        className={css.input}\r\n        placeholder=\" \"\r\n      />\r\n      <label className={css.label}>Search:</label>\r\n    </div>\r\n  );\r\n};\r\nexport default Filter;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Title_title__qZDq1\"};","import css from './Title.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Title = ({ text }) => <h1 className={css.title}>{text}</h1>;\r\n\r\nTitle.propTypes = {\r\n  text: PropTypes.string,\r\n};\r\n\r\nexport default Title;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"text\":\"MainPage_text__qLRah\"};","import AppBar from 'components/AppBar/AppBar';\r\nimport ContactForm from 'components/ContactForm';\r\nimport ContactList from 'components/ContactList';\r\nimport Filter from 'components/Filter';\r\nimport Title from 'components/Title';\r\nimport { useSelector } from 'react-redux';\r\nimport { CircleLoader } from 'react-spinners';\r\nimport { selectIsLoading } from 'redux/contacts/contactsSlice';\r\nimport { selectIsLoggedIn } from 'redux/user/userSlice';\r\nimport css from './MainPage.module.css';\r\nimport { useNavigate } from 'react-router';\r\n\r\nconst override = {\r\n  position: 'absolute',\r\n  top: '42%',\r\n  left: '45%',\r\n  display: 'block',\r\n};\r\n\r\nfunction MainPage() {\r\n  const loading = useSelector(selectIsLoading);\r\n  const isLoggedIn = useSelector(selectIsLoggedIn);\r\n  const navigate = useNavigate();\r\n\r\n  if (!isLoggedIn) {\r\n    navigate('/login');\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <AppBar />\r\n      {isLoggedIn ? (\r\n        <>\r\n          <Title text=\"Phonebook\" />\r\n          <ContactForm />\r\n          <Filter />\r\n          <Title text=\"Contacts\" />\r\n          <ContactList />\r\n          <CircleLoader\r\n            cssOverride={override}\r\n            color={'black'}\r\n            loading={loading}\r\n            size={150}\r\n            aria-label=\"Loading Spinner\"\r\n            data-testid=\"loader\"\r\n          />\r\n        </>\r\n      ) : (\r\n        <h2 className={css.text}>Please authorize to proceed</h2>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MainPage;\r\n"],"names":["user","useSelector","selectUser","dispatch","useDispatch","token","selectToken","className","css","name","onClick","logoutUser","isLoggedIn","selectIsLoggedIn","to","contacts","selectContacts","Error","render","message","schema","yup","shape","required","matches","number","initialValues","validationSchema","onSubmit","values","options","find","contact","alert","addContact","id","nanoid","resetForm","type","placeholder","htmlFor","deleteContact","filter","selectIsLoading","selectError","selectFilter","useEffect","fetchContacts","filtered","el","toLowerCase","includes","map","value","onChange","e","setFilter","target","text","override","position","top","left","display","loading","navigate","useNavigate","CircleLoader","cssOverride","color","size"],"sourceRoot":""}